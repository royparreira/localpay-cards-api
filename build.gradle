plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'jacoco'
}

group = 'dev.royp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.mapstruct:mapstruct:1.5.4.Final'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.4.Final'

    compileOnly 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.5.2'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events 'failed', 'skipped', 'passed'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }


    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/LocalpayCardsApiApplication.class',
                            'dev/royp/localpaycardsapi/config/**'
                    ])
        }))
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'localpay-cards-api'
        property 'sonar.coverage.exclusions',
                '**/LocalpayCardsApiApplication.java, ' +
                        '**/dev/royp/localpaycardsapi/config/**'
    }
}

tasks.named('sonar') {
    dependsOn jacocoTestReport
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

